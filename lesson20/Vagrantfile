# -*- mode: ruby -*-
# vim: set ft=ruby :
# -*- mode: ruby -*-
# vim: set ft=ruby :

MACHINES = {

  :Server => {
        :box_name => "centos/7",
        :net => [
                   {ip: '192.168.1.1', adapter: 2, netmask: "255.255.255.0", virtualbox__intnet: "vlan1"},
                ]
  },
  :Client => {
        :box_name => "centos/7",
        :net => [
                   {ip: '192.168.1.2', adapter: 2, netmask: "255.255.255.0", virtualbox__intnet: "vlan1"},
                ]
  },

}

Vagrant.configure("2") do |config|

  MACHINES.each do |boxname, boxconfig|

    config.vm.define boxname do |box|

        box.vm.box = boxconfig[:box_name]
        box.vm.host_name = boxname.to_s

        boxconfig[:net].each do |ipconf|
          box.vm.network "private_network", ipconf
        end
        
        if boxconfig.key?(:public)
          box.vm.network "public_network", boxconfig[:public]
        end

        box.vm.provision "shell", inline: <<-SHELL
          mkdir -p ~root/.ssh
                cp ~vagrant/.ssh/auth* ~root/.ssh
        SHELL
        
        case boxname.to_s
        when "Server"
	    box.vm.provision "ansible" do |ansible|
	        ansible.playbook = "playbooks/server.yml"
	        ansible.verbose = true
	        ansible.extra_vars = {
                    my_inner_ip: "192.168.2.1",
                    my_outer_ip: "192.168.1.1",
	            peer_inner_ip: "192.168.2.2",
	            peer_outer_ip: "192.168.1.2"
	        }
            end
        when "Client"
	    box.vm.provision "ansible" do |ansible|
	        ansible.playbook = "playbooks/client.yml"
	        ansible.verbose = true
	        ansible.extra_vars = {
                    my_inner_ip: "192.168.2.2",
                    my_outer_ip: "192.168.1.2",
	            peer_inner_ip: "192.168.2.1",
	            peer_outer_ip: "192.168.1.1"
                }
	    end

        end

      end

  end
  
  
end

